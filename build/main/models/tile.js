"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Tile = void 0;
const constants_1 = require("../constants");
const sat_1 = require("sat");
const helpers_1 = require("../helpers");
class Tile {
    constructor(id, image, tileset) {
        this.id = id;
        this.image = image;
        this.tileset = tileset;
        this.animFrame = 0;
        this.then = helpers_1.getPerformance();
        this.frameStart = helpers_1.getPerformance();
        this.properties = helpers_1.getTileProperties(id, this.tileset);
        this.type = this.properties && this.properties.type || null;
        this.width = this.tileset.tilewidth;
        this.height = this.tileset.tileheight;
        this.terrain = this.getTerrain();
        this.collisionMask = this.getCollisionMask();
    }
    overlapTest(polygon) {
        const response = new sat_1.Response();
        const hasCollision = this.collisionMask.some((shape) => sat_1.testPolygonPolygon(shape, polygon, response));
        response.clear();
        return hasCollision && response;
    }
    collide(polygon) {
        const overlap = this.overlapTest(polygon);
        let x, y;
        if (overlap) {
            x = this.isSlope() || this.isOneWay() ? 0 : overlap.overlapV.x;
            y = overlap.overlapV.y;
        }
        return new sat_1.Vector(x, y);
    }
    getBounds(x, y) {
        return {
            x: x * this.width,
            y: y * this.height,
            w: this.width,
            h: this.height
        };
    }
    getTerrain() {
        const { terrain } = this.properties;
        return terrain && terrain.split(',').map((id) => id ? parseInt(id) : null);
    }
    getNextGid() {
        const { tileset: { firstgid } } = this;
        if (this.properties && this.properties.animation) {
            this.frameStart = helpers_1.getPerformance();
            const { frames } = this.properties.animation;
            if (this.frameStart - this.then > frames[this.animFrame].duration) {
                if (this.animFrame <= frames.length) {
                    this.animFrame = helpers_1.normalize(this.animFrame + 1, 0, frames.length);
                }
                this.then = helpers_1.getPerformance();
            }
            return frames[this.animFrame].tileid + firstgid;
        }
        else
            return this.id;
    }
    getCollisionMask(posX = 0, posY = 0) {
        const objects = helpers_1.getProperties(this, 'objects');
        return helpers_1.isValidArray(objects)
            ? objects.map(({ shape, x, y, width, height, points }) => shape === 'polygon'
                ? new sat_1.Polygon(new sat_1.Vector(posX, posY), points.map(([x1, y1]) => new sat_1.Vector(x + x1, y + y1)))
                : new sat_1.Box(new sat_1.Vector(posX + x, posY + y), width, height).toPolygon())
            : [new sat_1.Box(new sat_1.Vector(posX, posY), this.width, this.height).toPolygon()];
    }
    isCutomShape() {
        return helpers_1.getProperties(this, 'objects');
    }
    isSlope() {
        return this.type === constants_1.TILE_TYPE.SLOPE;
    }
    isSolid() {
        return this.type !== constants_1.TILE_TYPE.NON_COLLIDING;
    }
    isOneWay() {
        return this.type === constants_1.TILE_TYPE.ONE_WAY;
    }
    isInvisible() {
        return this.type === constants_1.TILE_TYPE.INVISIBLE;
    }
    draw(ctx, x, y, scale = 1) {
        if (!this.isInvisible()) {
            const { image, tileset: { columns, firstgid, tilewidth, tileheight } } = this;
            const tileGid = this.getNextGid();
            const posX = ((tileGid - firstgid) % columns) * tilewidth;
            const posY = (Math.ceil(((tileGid - firstgid) + 1) / columns) - 1) * tileheight;
            //y = (tileheight - tile.height)
            ctx.drawImage(image, posX, posY, tilewidth, tileheight, x, y, tilewidth * scale, tileheight * scale);
        }
    }
}
exports.Tile = Tile;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGlsZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL2xpYi9tb2RlbHMvdGlsZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFDQSw0Q0FBd0M7QUFDeEMsNkJBTVk7QUFDWix3Q0FNbUI7QUFFbkIsTUFBYSxJQUFJO0lBV2IsWUFDVyxFQUFVLEVBQ1YsS0FBdUIsRUFDdkIsT0FBbUI7UUFGbkIsT0FBRSxHQUFGLEVBQUUsQ0FBUTtRQUNWLFVBQUssR0FBTCxLQUFLLENBQWtCO1FBQ3ZCLFlBQU8sR0FBUCxPQUFPLENBQVk7UUFUdkIsY0FBUyxHQUFHLENBQUMsQ0FBQTtRQUNiLFNBQUksR0FBRyx3QkFBYyxFQUFFLENBQUE7UUFDdkIsZUFBVSxHQUFHLHdCQUFjLEVBQUUsQ0FBQTtRQVNoQyxJQUFJLENBQUMsVUFBVSxHQUFHLDJCQUFpQixDQUFDLEVBQUUsRUFBRSxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUE7UUFDckQsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUMsVUFBVSxJQUFJLElBQUksQ0FBQyxVQUFVLENBQUMsSUFBSSxJQUFJLElBQUksQ0FBQTtRQUMzRCxJQUFJLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFBO1FBQ25DLElBQUksQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxVQUFVLENBQUE7UUFDckMsSUFBSSxDQUFDLE9BQU8sR0FBRyxJQUFJLENBQUMsVUFBVSxFQUFFLENBQUE7UUFDaEMsSUFBSSxDQUFDLGFBQWEsR0FBRyxJQUFJLENBQUMsZ0JBQWdCLEVBQUUsQ0FBQTtJQUNoRCxDQUFDO0lBRUQsV0FBVyxDQUFFLE9BQW9CO1FBQzdCLE1BQU0sUUFBUSxHQUFHLElBQUksY0FBUSxFQUFFLENBQUE7UUFDL0IsTUFBTSxZQUFZLEdBQUcsSUFBSSxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQ3hDLENBQUMsS0FBSyxFQUFFLEVBQUUsQ0FBQyx3QkFB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