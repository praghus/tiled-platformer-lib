"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Tile = void 0;
const constants_1 = require("../constants");
const sat_1 = require("sat");
const helpers_1 = require("../helpers");
class Tile {
    constructor(id, image, tileset) {
        this.id = id;
        this.image = image;
        this.tileset = tileset;
        this.animFrame = 0;
        this.then = helpers_1.getPerformance();
        this.frameStart = helpers_1.getPerformance();
        this.flipV = false;
        this.flipH = false;
        this.isCutomShape = () => helpers_1.getProperties(this, 'objects');
        this.isSlope = () => this.type === constants_1.TILE_TYPE.SLOPE;
        this.isSolid = () => this.type !== constants_1.TILE_TYPE.NON_COLLIDING;
        this.isOneWay = () => this.type === constants_1.TILE_TYPE.ONE_WAY;
        this.isInvisible = () => this.type === constants_1.TILE_TYPE.INVISIBLE;
        this.properties = helpers_1.getTileProperties(id, this.tileset);
        this.type = this.properties && this.properties.type || null;
        this.width = this.tileset.tilewidth;
        this.height = this.tileset.tileheight;
        this.terrain = this.getTerrain();
        this.collisionMasks = this.getCollisionMask();
    }
    overlapTest(polygon) {
        const response = new sat_1.Response();
        const hasCollision = this.collisionMasks.some((shape) => sat_1.testPolygonPolygon(shape, polygon, response));
        response.clear();
        return hasCollision && response;
    }
    collide(polygon) {
        const overlap = this.overlapTest(polygon);
        let x, y;
        if (overlap) {
            x = this.isSlope() || this.isOneWay() ? 0 : overlap.overlapV.x;
            y = overlap.overlapV.y;
        }
        return new sat_1.Vector(x, y);
    }
    getBounds(x, y) {
        return {
            x: x * this.width,
            y: y * this.height,
            w: this.width,
            h: this.height
        };
    }
    getTerrain() {
        const { terrain } = this.properties;
        return terrain && terrain.split(',').map((id) => id ? parseInt(id) : null);
    }
    getNextGid() {
        const { tileset: { firstgid } } = this;
        if (this.properties && this.properties.animation) {
            this.frameStart = helpers_1.getPerformance();
            const { frames } = this.properties.animation;
            if (this.frameStart - this.then > frames[this.animFrame].duration) {
                if (this.animFrame <= frames.length) {
                    this.animFrame = helpers_1.normalize(this.animFrame + 1, 0, frames.length);
                }
                this.then = helpers_1.getPerformance();
            }
            return frames[this.animFrame].tileid + firstgid;
        }
        else
            return this.id;
    }
    getCollisionMask(posX = 0, posY = 0) {
        const objects = helpers_1.getProperties(this, 'objects');
        return helpers_1.isValidArray(objects)
            ? objects.map(({ shape, x, y, width, height, points }) => shape === 'polygon'
                ? new sat_1.Polygon(new sat_1.Vector(posX, posY), points.map(([x1, y1]) => new sat_1.Vector(x + x1, y + y1)))
                : new sat_1.Box(new sat_1.Vector(posX + x, posY + y), width, height).toPolygon())
            : [new sat_1.Box(new sat_1.Vector(posX, posY), this.width, this.height).toPolygon()];
    }
    draw(ctx, x, y, scale = 1) {
        if (!this.isInvisible()) {
            const { image, tileset: { columns, firstgid, tilewidth, tileheight } } = this;
            const tileGid = this.getNextGid();
            const posX = ((tileGid - firstgid) % columns) * tilewidth;
            const posY = (Math.ceil(((tileGid - firstgid) + 1) / columns) - 1) * tileheight;
            //y = (tileheight - tile.height)
            ctx.drawImage(image, posX, posY, tilewidth, tileheight, x, y, tilewidth * scale, tileheight * scale);
        }
    }
}
exports.Tile = Tile;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGlsZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL2xpYi9tb2RlbHMvdGlsZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFDQSw0Q0FBd0M7QUFDeEMsNkJBTVk7QUFDWix3Q0FNbUI7QUFFbkIsTUFBYSxJQUFJO0lBYWIsWUFDVyxFQUFVLEVBQ1YsS0FBdUIsRUFDdkIsT0FBbUI7UUFGbkIsT0FBRSxHQUFGLEVBQUUsQ0FBUTtRQUNWLFVBQUssR0FBTCxLQUFLLENBQWtCO1FBQ3ZCLFlBQU8sR0FBUCxPQUFPLENBQVk7UUFYdkIsY0FBUyxHQUFHLENBQUMsQ0FBQTtRQUNiLFNBQUksR0FBRyx3QkFBYyxFQUFFLENBQUE7UUFDdkIsZUFBVSxHQUFHLHdCQUFjLEVBQUUsQ0FBQTtRQUc3QixVQUFLLEdBQUcsS0FBSyxDQUFDO1FBQ2QsVUFBSyxHQUFHLEtBQUssQ0FBQztRQWVkLGlCQUFZLEdBQUcsR0FBWSxFQUFFLENBQUMsdUJBQWEsQ0FBQyxJQUFJLEVBQUUsU0FBUyxDQUFDLENBQUE7UUFDNUQsWUFBTyxHQUFHLEdBQVksRUFBRSxDQUFDLElBQUksQ0FBQyxJQUFJLEtBQUsscUJBQVMsQ0FBQyxLQUFLLENBQUE7UUFDdEQsWUFBTyxHQUFHLEdBQVksRUFBRSxDQUFDLElBQUksQ0FBQyxJQUFJLEtBQUsscUJBQVMsQ0FBQyxhQUFhLENBQUE7UUFDOUQsYUFBUSxHQUFHLEdBQVksRUFBRSxDQUFDLElBQUksQ0FBQyxJQUFJLEtBQUsscUJBQVMsQ0FBQyxPQUFPLENBQUE7UUFDekQsZ0JBQVcsR0FBRyxHQUFZLEVBQUUsQ0FBQyxJQUFJLENBQUMsSUFBSSxLQUFLLHFCQUFTLENBQUMsU0FBUyxDQUFBO1FBWmpFLElBQUksQ0FBQyxVQUFVLEdBQUcsMkJBQWlCLENBQUMsRUFBRSxFQUFFLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQTtRQUNyRCxJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQyxVQUFVLElBQUksSUFB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