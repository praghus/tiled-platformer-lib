import { isValidArray } from '../helpers';
import { NODE_TYPE } from '../constants';
export class Layer {
    constructor(layerData) {
        this.type = NODE_TYPE.CUSTOM;
        this.properties = {};
        this.data = [];
        this.objects = [];
        if (layerData) {
            this.id = layerData.id;
            this.name = layerData.name || '';
            this.type = layerData.type || NODE_TYPE.CUSTOM;
            this.visible = layerData.visible === undefined ? 1 : layerData.visible;
            this.properties = layerData.properties;
            this.width = layerData.width;
            this.height = layerData.height;
            this.data = layerData.data;
        }
    }
    getObjects() {
        return this.objects;
    }
    update(scene, time) {
        if (isValidArray(this.objects)) {
            this.activeObjectsCount = 0;
            for (const obj of this.objects) {
                if (scene.onScreen(obj)) {
                    this.objects.forEach((activeObj) => activeObj.id !== obj.id && activeObj.overlapTest(obj, scene));
                    obj.update && obj.update(scene, time);
                    obj.dead && this.removeObject(obj);
                    this.activeObjectsCount++;
                }
            }
        }
    }
    draw(ctx, scene) {
        if (this.visible) {
            switch (this.type) {
                case NODE_TYPE.LAYER:
                    scene.forEachVisibleTile(this.id, (tile, x, y) => tile && tile.draw(ctx, x, y));
                    break;
                case NODE_TYPE.OBJECT_GROUP:
                    scene.forEachVisibleObject(this.id, (obj) => obj.draw(ctx, scene));
                    break;
            }
            // @todo: handle image layer
        }
    }
    isInRange(x, y) {
        return (x >= 0 &&
            y >= 0 &&
            x < this.width &&
            y < this.height);
    }
    get(x, y) {
        return this.isInRange(x, y) && this.data[x + this.width * y];
    }
    put(x, y, tileId) {
        if (this.isInRange(x, y)) {
            this.data[x + this.width * y] = tileId;
        }
    }
    clear(x, y) {
        if (this.isInRange(x, y)) {
            this.data[x + this.width * y] = null;
        }
    }
    addObject(obj, index = null) {
        index !== null
            ? this.objects.splice(index, 0, obj)
            : this.objects.push(obj);
    }
    removeObject(obj) {
        this.objects.splice(this.objects.indexOf(obj), 1);
    }
    toggleVisibility(toggle) {
        this.visible = toggle;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGF5ZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9saWIvbW9kZWxzL2xheWVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxZQUFZLENBQUE7QUFDekMsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLGNBQWMsQ0FBQTtBQUd4QyxNQUFNLE9BQU8sS0FBSztJQVlkLFlBQWEsU0FBb0I7UUFUMUIsU0FBSSxHQUFXLFNBQVMsQ0FBQyxNQUFNLENBQUE7UUFDL0IsZUFBVSxHQUFvQixFQUFFLENBQUE7UUFLaEMsU0FBSSxHQUFhLEVBQUUsQ0FBQTtRQUNuQixZQUFPLEdBQVUsRUFBRSxDQUFBO1FBR3RCLElBQUksU0FBUyxFQUFFO1lBQ1gsSUFBSSxDQUFDLEVBQUUsR0FBRyxTQUFTLENBQUMsRUFBRSxDQUFBO1lBQ3RCLElBQUksQ0FBQyxJQUFJLEdBQUcsU0FBUyxDQUFDLElBQUksSUFBSSxFQUFFLENBQUE7WUFDaEMsSUFBSSxDQUFDLElBQUksR0FBRyxTQUFTLENBQUMsSUFBSSxJQUFJLFNBQVMsQ0FBQyxNQUFNLENBQUE7WUFDOUMsSUFBSSxDQUFDLE9BQU8sR0FBRyxTQUFTLENBQUMsT0FBTyxLQUFLLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsT0FBTyxDQUFBO1lBQ3RFLElBQUksQ0FBQyxVQUFVLEdBQUcsU0FBUyxDQUFDLFVBQVUsQ0FBQTtZQUN0QyxJQUFJLENBQUMsS0FBSyxHQUFHLFNBQVMsQ0FBQyxLQUFLLENBQUE7WUFDNUIsSUFBSSxDQUFDLE1BQU0sR0FBRyxTQUFTLENBQUMsTUFBTSxDQUFBO1lBQzlCLElBQUksQ0FBQyxJQUFJLEdBQUcsU0FBUyxDQUFDLElBQUksQ0FBQTtTQUM3QjtJQUNMLENBQUM7SUFFRCxVQUFVO1FBQ04sT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFBO0lBQ3ZCLENBQUM7SUFFRCxNQUFN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