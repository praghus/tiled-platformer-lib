import { TILE_TYPE } from '../constants';
import { testPolygonPolygon, Box, Polygon, Response, Vector } from 'sat';
import { getPerformance, getProperties, getTileProperties, isValidArray, normalize } from '../helpers';
export class Tile {
    constructor(id, image, tileset) {
        this.id = id;
        this.image = image;
        this.tileset = tileset;
        this.animFrame = 0;
        this.then = getPerformance();
        this.frameStart = getPerformance();
        this.properties = getTileProperties(id, this.tileset);
        this.type = this.properties && this.properties.type || null;
        this.width = this.tileset.tilewidth;
        this.height = this.tileset.tileheight;
        this.terrain = this.getTerrain();
        this.collisionMask = this.getCollisionMask();
    }
    overlapTest(polygon) {
        const response = new Response();
        const hasCollision = this.collisionMask.some((shape) => testPolygonPolygon(shape, polygon, response));
        response.clear();
        return hasCollision && response;
    }
    collide(polygon) {
        const overlap = this.overlapTest(polygon);
        let x, y;
        if (overlap) {
            x = this.isSlope() || this.isOneWay() ? 0 : overlap.overlapV.x;
            y = overlap.overlapV.y;
        }
        return new Vector(x, y);
    }
    getBounds(x, y) {
        return {
            x: x * this.width,
            y: y * this.height,
            w: this.width,
            h: this.height
        };
    }
    getTerrain() {
        const { terrain } = this.properties;
        return terrain && terrain.split(',').map((id) => id ? parseInt(id) : null);
    }
    getNextGid() {
        const { tileset: { firstgid } } = this;
        if (this.properties && this.properties.animation) {
            this.frameStart = getPerformance();
            const { frames } = this.properties.animation;
            if (this.frameStart - this.then > frames[this.animFrame].duration) {
                if (this.animFrame <= frames.length) {
                    this.animFrame = normalize(this.animFrame + 1, 0, frames.length);
                }
                this.then = getPerformance();
            }
            return frames[this.animFrame].tileid + firstgid;
        }
        else
            return this.id;
    }
    getCollisionMask(posX = 0, posY = 0) {
        const objects = getProperties(this, 'objects');
        return isValidArray(objects)
            ? objects.map(({ shape, x, y, width, height, points }) => shape === 'polygon'
                ? new Polygon(new Vector(posX, posY), points.map(([x1, y1]) => new Vector(x + x1, y + y1)))
                : new Box(new Vector(posX + x, posY + y), width, height).toPolygon())
            : [new Box(new Vector(posX, posY), this.width, this.height).toPolygon()];
    }
    isCutomShape() {
        return getProperties(this, 'objects');
    }
    isSlope() {
        return this.type === TILE_TYPE.SLOPE;
    }
    isSolid() {
        return this.type !== TILE_TYPE.NON_COLLIDING;
    }
    isOneWay() {
        return this.type === TILE_TYPE.ONE_WAY;
    }
    isInvisible() {
        return this.type === TILE_TYPE.INVISIBLE;
    }
    draw(ctx, x, y, scale = 1) {
        if (!this.isInvisible()) {
            const { image, tileset: { columns, firstgid, tilewidth, tileheight } } = this;
            const tileGid = this.getNextGid();
            const posX = ((tileGid - firstgid) % columns) * tilewidth;
            const posY = (Math.ceil(((tileGid - firstgid) + 1) / columns) - 1) * tileheight;
            //y = (tileheight - tile.height)
            ctx.drawImage(image, posX, posY, tilewidth, tileheight, x, y, tilewidth * scale, tileheight * scale);
        }
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGlsZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL2xpYi9tb2RlbHMvdGlsZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sY0FBYyxDQUFBO0FBQ3hDLE9BQU8sRUFDSCxrQkFBa0IsRUFDbEIsR0FBRyxFQUNILE9BQU8sRUFDUCxRQUFRLEVBQ1IsTUFBTSxFQUNULE1BQU0sS0FBSyxDQUFBO0FBQ1osT0FBTyxFQUNILGNBQWMsRUFDZCxhQUFhLEVBQ2IsaUJBQWlCLEVBQ2pCLFlBQVksRUFDWixTQUFTLEVBQ1osTUFBTSxZQUFZLENBQUE7QUFFbkIsTUFBTSxPQUFPLElBQUk7SUFXYixZQUNXLEVBQVUsRUFDVixLQUF1QixFQUN2QixPQUFtQjtRQUZuQixPQUFFLEdBQUYsRUFBRSxDQUFRO1FBQ1YsVUFBSyxHQUFMLEtBQUssQ0FBa0I7UUFDdkIsWUFBTyxHQUFQLE9BQU8sQ0FBWTtRQVR2QixjQUFTLEdBQUcsQ0FBQyxDQUFBO1FBQ2IsU0FBSSxHQUFHLGNBQWMsRUFBRSxDQUFBO1FBQ3ZCLGVBQVUsR0FBRyxjQUFjLEVBQUUsQ0FBQTtRQVNoQyxJQUFJLENBQUMsVUFBVSxHQUFHLGlCQUFpQixDQUFDLEVBQUUsRUFBRSxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUE7UUFDckQsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUMsVUFBVSxJQUFJLElBQUksQ0FBQyxVQUFVLENBQUMsSUFBSSxJQUFJLElBQUksQ0FBQTtRQUMzRCxJQUFJLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFBO1FBQ25DLElBQUksQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxVQUFVLENBQUE7UUFDckMsSUFBSSxDQUFDLE9BQU8sR0FBRyxJQUFJLENBQUMsVUFBVSxFQUFFLENBQUE7UUFDaEMsSUFBSSxDQUFDLGFBQWEsR0FBRyxJQUFJLENBQUMsZ0JBQWdCLEVBQUUsQ0FBQTtJQUNoRCxDQUFDO0lBRUQsV0FBVyxDQUFFLE9BQW9CO1FBQzdCLE1BQU0sUUFBUSxHQUFHLElBQUksUUFBUSxFQUFFLENBQUE7UUFDL0IsTUFBTSxZQUFZLEdBQUcsSUFBSSxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQ3hDLENBQUMsS0FBSyxFQUFFLEVBQUUsQ0FBQyxrQkFBa0IsQ0FBQyxLQUFLLEVBQUUsT0FBTyxFQUFFLFFBQVEsQ0FBQyxDQUMxRCxDQUFBO1FBQ0QsUUFBUSxDQUFDLEtBQUssRUFBRSxDQUFBO1FBQ2hCLE9BQU8sWUFBWSxJQUFJLFFBQVEsQ0FBQTtJQUNuQyxDQUFDO0lBRUQsT0FBTyxDQUFFLE9BQW9CO1FBQ3pCLE1BQU0sT0FBTyxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUMsT0FBTyxDQUFDLENBQUE7UUFDekMsSUFBSSxDQUFTLEVBQUUsQ0FBUyxDQUFBO1FBQ3hCLElBQUksT0FBTyxFQUFFO1lBQ1QsQ0FBQyxHQUFHLElBQUksQ0FBQyxPQUFPLEVBQUUsSUFBSSxJQUFJLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUE7WUFDOUQsQ0FBQyxHQUFHLE9BQU8sQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFBO1NBQ3pCO1FBQ0QsT0FBTyxJQUFJLE1BQU0sQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUE7SUFDM0IsQ0FBQztJQUVELFNBQVMsQ0FBRSxDQUFTLEVBQUUsQ0FBUztRQUMzQixPQUFPO1lBQ0gsQ0FBQyxFQUFFLENBQUMsR0FBRyxJQUFJLENBQUMsS0FBSztZQUNqQixDQUFDLEVBQUUsQ0FBQyxHQUFHLElBQUksQ0FBQyxNQUFNO1lBQ2xCLENBQUMsRUFBRSxJQUFJLENBQUMsS0FBSztZQUNiLENBQUMsRUFBRSxJQUFJLENBQUMsTUFBTTtTQUNqQixDQUFBO0lBQ0wsQ0FBQztJQUVELFVBQVU7UUFDTixNQUFNLEVBQUUsT0FBTyxFQUFFLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQTtRQUNuQyxPQUFPLE9BQU8sSUFBSSxPQUFPLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQVUsRUFBRSxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFBO0lBQ3RGLENBQUM7SUFFRCxVQUFVO1FBQ04sTUFBTSxFQUFFLE9BQU8sRUFBRSxFQUFFLFFBQVEsRUFBRSxFQUFFLEdBQUcsSUFBSSxDQUFBO1FBQ3RDLElBQUksSUFBSSxDQUFDLFVBQVUsSUFBSSxJQUFJLENBQUMsVUFBVSxDQUFDLFNBQVMsRUFBRTtZQUM5QyxJQUFJLENBQUMsVUFBVSxHQUFHLGNBQWMsRUFBRSxDQUFBO1lBQ2xDLE1BQU0sRUFBRSxNQUFNLEVBQUUsR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDLFNBQVMsQ0FBQTtZQUM1QyxJQUFJLElBQUksQ0FBQyxVQUFVLEdBQUcsSUFBSSxDQUFDLElBQUksR0FBRyxNQUFNLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDLFFBQVEsRUFBRTtnQkFDL0QsSUFBSSxJQUFJLENBQUMsU0FBUyxJQUFJLE1BQU0sQ0FBQyxNQUFNLEVBQUU7b0JBQ2pDLElBQUksQ0FBQyxTQUFTLEdBQUcsU0FBUyxDQUFDLElBQUksQ0FBQyxTQUFTLEdBQUcsQ0FBQyxFQUFFLENBQUMsRUFBRSxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUE7aUJBQ25FO2dCQUNELElBQUksQ0FBQyxJQUFJLEdBQUcsY0FBYyxFQUFFLENBQUE7YUFDL0I7WUFDRCxPQUFPLE1BQU0sQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUMsTUFBTSxHQUFHLFFBQVEsQ0FBQTtTQUNsRDs7WUFDSSxPQUFPLElBQUksQ0FBQyxFQUFFLENBQUE7SUFDdkIsQ0FBQztJQUVELGdCQUFnQixDQUFFLElBQUksR0FBRyxDQUFDLEVBQUUsSUFBSSxHQUFHLENBQUM7UUFDaEMsTUFBTSxPQUFPLEdBQUcsYUFBYSxDQUFDLElBQUksRUFBRSxTQUFTLENBQUMsQ0FBQTtRQUM5QyxPQUFPLFlBQVksQ0FBQyxPQUFPLENBQUM7WUFDeEIsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLEtBQUssRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLEtBQUssRUFBRSxNQUFNLEVBQUUsTUFBTSxFQUFFLEVBQUUsRUFBRSxDQUNyRCxLQUFLLEtBQUssU0FBUztnQkFDZixDQUFDLENBQUMsSUFBSSxPQUFPLENBQUMsSUFBSSxNQUFNLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxFQUFFLE1BQU0sQ0FBQyxHQUFHLENBQzVDLENBQUMsQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUFDLElBQUksTUFBTSxDQUFDLENBQUMsR0FBRyxFQUFFLEVBQUUsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUMzQyxDQUFDO2dCQUNGLENBQUMsQ0FBQyxJQUFJLEdBQUcsQ0FBQyxJQUFJLE1BQU0sQ0FBQyxJQUFJLEdBQUcsQ0FBQyxFQUFFLElBQUksR0FBRyxDQUFDLENBQUMsRUFBRSxLQUFLLEVBQUUsTUFBTSxDQUFDLENBQUMsU0FBUyxFQUFFLENBQzNFO1lBQ0QsQ0FBQyxDQUFDLENBQUMsSUFBSSxHQUFHLENBQUMsSUFBSSxNQUFNLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxFQUFFLElBQUksQ0FBQyxLQUFLLEVBQUUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLFNBQVMsRUFBRSxDQUFDLENBQUE7SUFDaEYsQ0FBQztJQUVELFlBQVk7UUFDUixPQUFPLGFBQWEsQ0FBQyxJQUFJLEVBQUUsU0FBUyxDQUFDLENBQUE7SUFDekMsQ0FBQztJQUVELE9BQU87UUFDSCxPQUFPLElBQUksQ0FBQyxJQUFJLEtBQUssU0FBUyxDQUFDLEtBQUssQ0FBQTtJQUN4QyxDQUFDO0lBRUQsT0FBTztRQUNILE9BQU8sSUFBSSxDQUFDLElBQUksS0FBSyxTQUFTLENBQUMsYUFBYSxDQUFBO0lBQ2hELENBQUM7SUFFRCxRQUFRO1FBQ0osT0FBTyxJQUFJLENBQUMsSUFBSSxLQUFLLFNBQVMsQ0FBQyxPQUFPLENBQUE7SUFDMUMsQ0FBQztJQUVELFdBQVc7UUFDUCxPQUFPLElBQUksQ0FBQyxJQUFJLEtBQUssU0FBUyxDQUFDLFNBQVMsQ0FBQTtJQUM1QyxDQUFDO0lBRUQsSUFBSSxDQUFFLEdBQTZCLEVBQUUsQ0FBUyxFQUFFLENBQVMsRUFBRSxLQUFLLEdBQUcsQ0FBQztRQUNoRSxJQUFJLENBQUMsSUFBSSxDQUFDLFdBQVcsRUFBRSxFQUFFO1lBQ3JCLE1BQU0sRUFBRSxLQUFLLEVBQUUsT0FBTyxFQUFFLEVBQUUsT0FBTyxFQUFFLFFBQVEsRUFBRSxTQUFTLEVBQUUsVUFBVSxFQUFFLEVBQUUsR0FBRyxJQUFJLENBQUE7WUFDN0UsTUFBTSxPQUFPLEdBQUcsSUFBSSxDQUFDLFVBQVUsRUFBRSxDQUFBO1lBQ2pDLE1BQU0sSUFBSSxHQUFHLENBQUMsQ0FBQyxPQUFPLEdBQUcsUUFBUSxDQUFDLEdBQUcsT0FBTyxDQUFDLEdBQUcsU0FBUyxDQUFBO1lBQ3pELE1BQU0sSUFBSSxHQUFHLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsT0FBTyxHQUFHLFFBQVEsQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLFVBQVUsQ0FBQTtZQUMvRSxnQ0FBZ0M7WUFDaEMsR0FBRyxDQUFDLFNBQVMsQ0FBQyxLQUFLLEVBQ2YsSUFBSSxFQUFFLElBQUksRUFBRSxTQUFTLEVBQUUsVUFBVSxFQUNqQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLFNBQVMsR0FBRyxLQUFLLEVBQUUsVUFBVSxHQUFHLEtBQUssQ0FDOUMsQ0FBQTtTQUNKO0lBQ0wsQ0FBQztDQUNKIn0=